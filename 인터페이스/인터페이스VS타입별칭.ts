/*
인터페이스 
인터페이스는 객체만의 형태를 묘사할수 있습니다.
모든 종류의 타입 별칭을 인터페이스로 대체할수는 없습니다.
인터페이스로는 이미 생성한 인터페이스를 다시 열어서 내용을 추가하는것이 가능하다 
프로퍼티의 확장(extends)즉 다른 인터페이스를 상속하는 경우에는 클래스를 작성하는것과 유사하게 다른 인터페이스로 확장이 가능합니다.
객체 묘사에 있어서는 인터페이스가 아주 유용합니다.

타입 별칭
객체의 형태를 묘사하는 경우가 아니라면 타입 별칭을 사용해야만한다.
타입으로는이미 생성한 인터페이스를 다시 열어서 내용을 추가하는것이 불가능합니다.
하지만 타입 별칭을 사용하면 extends 키워드를 사용할수 없고 &를 이용한 교차 타입을 사용해야 합니다.
&를 사용해서 작성하여도 되지만 인터페이스 방식이 친숙하고 용이합니다.
프로퍼티의 확장 즉 다른 인터페이스를 상속하는 경우에는 클래스를 작성하는것과 유사하게 다른 인터페이스로 확장이 가능합니다.

*/

// type 형태로 열어서 내용을 수정하는것은 불가능하다 식별자가 중복되었다고 뜹니다.
type Chicken = {
  breed: string;
};

type Chicken = {
  numEggs: number;
};

// interface로는 가능합니다.
interface Chiken {
  breed: string;
}

interface Chiken {
  numEggs: string;
}
